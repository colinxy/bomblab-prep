#+TITLE: Bomblab Preparation


* Intro

This project aims to duplicate the behavior the actual bomblab.
It serves as a simplified version of bomblab. Just as the actual
bomblab, you get a program with several phases of bombs, and you
have to type the correct string (secret phrase) to defuse the bomb.

But unlike the actual bomblab, you can try as many times as you want,
and there is no consequence of exploding the bomb.

The goal of this program is to give you a easier program
to start with, without the fear of losing points on your
actual lab.


* Update

There are some exciting announcements to be made.
With the newly added 2 python programs, you can now
extend gdb's functionality.

=gdb_prompt.py= is used to improve gdb's prompt by
replacing the dumb =(gdb)= prompt with a informative prompt
=(function name)= and show it in various colors.
If you are in a particular phase,
the prompt will show function name in green, while if you are
in =explode_bomb=, the prompt will show it in red.

=kill_bomb.py= is used to give you a heads-up when you are trying
to use =continue= command inside function =explode_bomb=. It will print
out a warning message and ask you if you want to kill the program.
However, you will have to invoke this customized version of =continue=
with =cb=, short for 'continue bomb'.

You can use the above features within gdb by typing the command
=source gdb_prompt.py= and =source kill_bomb.py= within gdb.

Here is a screenshot:

#+ATTR_HTML: :width 500px
[[screenshot.png]]


* Running the program

This project is expected to run in command line under a *nix system.

First create the bomb with =./build.sh=, and you will find an executable
with the name =bomb_prep=.
Then practice defusing the bomb with
=gdb bomb_prep=.

It is strongly advised not to look at the source code before
trying out the bomb!!! Once the logic of the program becomes clear to
you, debugging the assembly will be like cheating. You have to train
yourself to debug without any source code.

NOTE: you might get *different* results under *different* machines.
This is an expected behavior, not a bug.


* Some tips that might be helpful for the lab

 - *read the bomblab handout carefully*
 - when you first enter the debugger, try command =info functions=
   to see all functions of the program.
 - set a break point at each of the phases.
 - set a breakpoint at function =explode_bomb=, which is quite likely
   the spot where the fiendish little bomb tries to make
   contact with your instructor about your unsuccessful attempt.
 - to see the next instruction to be executed, set the following options
   in gdb
   - =set disassemble-next-line on=
   - =show disassemble-next-line=
 - it is better to step through code per instruction.
   - =ni= or =nexti= for next instruction
     - do not step into function if the instruction is =call=
   - =si= or =stepi= for step instruction
     - step into function if the instruction is =call=
